/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package interfaz;

import archivos.ManipulacionArchivos;
import cjb.ci.CtrlInterfaz;
import java.awt.BorderLayout;
import java.awt.Image;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import modelo.Boleto;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import org.jfree.chart.ChartUtils;

/**
 *
 * @author chemo
 */
public class VtnAdministrador extends javax.swing.JInternalFrame
{

    private static VtnAdministrador instancia;
    private JFreeChart graficoIngresos;
    private JFreeChart graficoBoletos;

    /**
     * Creates new form VtnAdministrador
     */
    public VtnAdministrador()
    {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null);
        instancia = this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        labelVistaPrevia = new javax.swing.JLabel();
        panelEstadisticas = new javax.swing.JPanel();
        panelIngresos = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        precioGeneral = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        precioPreferencial = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        precioVIP = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        panelResumen = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton3.setBackground(new java.awt.Color(51, 153, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagen.png"))); // NOI18N
        jButton3.setText("IMAGEN");
        jButton3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, 350, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        labelVistaPrevia.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelVistaPrevia, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelVistaPrevia, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 350, 250));

        panelEstadisticas.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout panelEstadisticasLayout = new javax.swing.GroupLayout(panelEstadisticas);
        panelEstadisticas.setLayout(panelEstadisticasLayout);
        panelEstadisticasLayout.setHorizontalGroup(
            panelEstadisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        panelEstadisticasLayout.setVerticalGroup(
            panelEstadisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        jPanel1.add(panelEstadisticas, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 0, 540, 280));

        panelIngresos.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout panelIngresosLayout = new javax.swing.GroupLayout(panelIngresos);
        panelIngresos.setLayout(panelIngresosLayout);
        panelIngresosLayout.setHorizontalGroup(
            panelIngresosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        panelIngresosLayout.setVerticalGroup(
            panelIngresosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        jPanel1.add(panelIngresos, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 280, 540, 280));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Precios De Boletos");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("General:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));
        jPanel3.add(precioGeneral, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 100, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Preferencial:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));
        jPanel3.add(precioPreferencial, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 100, -1));

        jLabel4.setText("VIP:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));
        jPanel3.add(precioVIP, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 100, -1));

        jButton1.setBackground(new java.awt.Color(51, 204, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("ACEPTAR");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 100, -1));

        jButton2.setBackground(new java.awt.Color(255, 0, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("LIMPIAR");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, 100, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 250, 190));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Generar Reportes");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, -1, -1));

        jButton4.setBackground(new java.awt.Color(51, 153, 0));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Reiniciar Evento");
        jButton4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 230, -1));

        jButton5.setBackground(new java.awt.Color(51, 153, 0));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Generar Reporte PDF");
        jButton5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 230, -1));

        jButton6.setBackground(new java.awt.Color(51, 153, 0));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Importar Graficas");
        jButton6.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 230, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 250, 190));

        panelResumen.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout panelResumenLayout = new javax.swing.GroupLayout(panelResumen);
        panelResumen.setLayout(panelResumenLayout);
        panelResumenLayout.setHorizontalGroup(
            panelResumenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        panelResumenLayout.setVerticalGroup(
            panelResumenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );

        jPanel1.add(panelResumen, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 260, 350, 270));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        guardarPrecios();
        ManipulacionArchivos.guarda(null, VtnAsientos.precios, "precios.dat");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameOpened
    {//GEN-HEADEREND:event_formInternalFrameOpened
//        precioGeneral.setText(String.valueOf(VtnAsientos.precios.get("General")));
//        precioPreferencial.setText(String.valueOf(VtnAsientos.precios.get("Preferencial")));
//        precioVIP.setText(String.valueOf(VtnAsientos.precios.get("VIP")));
        cargarPreciosDesdeArchivo();

        File archivo = new File("Datos/flyer.png");
        if (archivo.exists())
        {
            ImageIcon icono = new ImageIcon(archivo.getAbsolutePath());
            Image imgEscalada = icono.getImage().getScaledInstance(
                    labelVistaPrevia.getWidth(),
                    labelVistaPrevia.getHeight(),
                    Image.SCALE_SMOOTH
            );
            labelVistaPrevia.setIcon(new ImageIcon(imgEscalada));
        }
        mostrarEstadisticasBoletos(panelEstadisticas);
        mostrarGraficaIngresos();
        actualizarPanelResumenConEstilo(panelResumen);
    }//GEN-LAST:event_formInternalFrameOpened

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        CtrlInterfaz.limpia(precioGeneral, precioPreferencial, precioVIP);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
    {//GEN-HEADEREND:event_jButton3ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Imágenes", "jpg", "jpeg", "png"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            try
            {
                File imagenSeleccionada = fileChooser.getSelectedFile();
                Path origen = Paths.get(imagenSeleccionada.getAbsolutePath());

                Path destino = Paths.get("Datos", "flyer.png");
                Files.createDirectories(destino.getParent());

                Files.copy(origen, destino, StandardCopyOption.REPLACE_EXISTING);
                ImageIcon icono = new ImageIcon(destino.toFile().getAbsolutePath());
                Image imgEscalada = icono.getImage().getScaledInstance(labelVistaPrevia.getWidth(), labelVistaPrevia.getHeight(), Image.SCALE_SMOOTH);
                labelVistaPrevia.setIcon(new ImageIcon(imgEscalada));

                JOptionPane.showMessageDialog(this, "Imagen actualizada correctamente.");
            } catch (IOException ex)
            {
                JOptionPane.showMessageDialog(this, "Error al guardar la imagen: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed
        String mensaje = """
    ¿Está seguro que desea reiniciar el evento?

    Se eliminarán los siguientes datos:
    - Archivos de boletos vendidos (*.txt)
    - Archivos de boletos ordenados (*.txt)
    - Archivo de boletos vendidos (.dat)
    - Se restablecerán los precios predeterminados
    """;

        int opcion = JOptionPane.showConfirmDialog(this, mensaje, "Confirmar reinicio", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (opcion == JOptionPane.YES_OPTION)
        {
            File root = new File(".");
            for (File file : root.listFiles())
            {
                if (file.getName().startsWith("boletos_ordenados_") || file.getName().startsWith("boletos_vendidos_"))
                {
                    file.delete();
                }
            }

            File dat = new File("Datos/boletosVendidos.dat");
            if (dat.exists())
            {
                dat.delete();
            }

            File compras = new File("Datos/comprasUsuarios.dat");
            if (compras.exists())
            {
                compras.delete();
            }

            Map<String, Double> preciosDefault = new HashMap<>();
            preciosDefault.put("VIP", 300.0);
            preciosDefault.put("Preferencial", 200.0);
            preciosDefault.put("General", 100.0);
            ManipulacionArchivos.guarda(null, preciosDefault, "precios.dat");

            VtnAsientos.precios.clear();
            VtnAsientos.precios.putAll(preciosDefault);

            JOptionPane.showMessageDialog(this, "Se ha reiniciado correctamente el sistema para un nuevo evento.");
        } else
        {
            JOptionPane.showMessageDialog(this, "Operación cancelada.");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton5ActionPerformed
    {//GEN-HEADEREND:event_jButton5ActionPerformed
        generarReportePDFDesdeGraficas();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed
    {//GEN-HEADEREND:event_jButton6ActionPerformed
        exportarGraficasCombinadas("reporte_graficas.png");
    }//GEN-LAST:event_jButton6ActionPerformed

    public void actualizarPanelResumenConEstilo(JPanel panel)
    {
        panel.removeAll();

        List<Boleto> boletos = (List<Boleto>) ManipulacionArchivos.carga(null, "boletosVendidos.dat");

        int totalBoletos = 0;
        double montoTotal = 0.0;
        String haceTiempo = "hace 2 min";

        if (boletos != null && !boletos.isEmpty())
        {
            totalBoletos = boletos.size();
            for (Boleto b : boletos)
            {
                montoTotal += b.getPrecio();
            }
        }

        panel.setLayout(new java.awt.GridLayout(3, 1, 5, 5));
        panel.setBackground(Color.WHITE);
        panel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
                javax.swing.BorderFactory.createLineBorder(new Color(220, 220, 220), 2, true),
                javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30)
        ));

        java.awt.Font boldFont = new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 15);
        java.awt.Font regularFont = new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14);

        javax.swing.JLabel lbl1 = new javax.swing.JLabel("Total boletos vendidos: " + totalBoletos);
        lbl1.setFont(boldFont);
        lbl1.setForeground(Color.BLACK);

        javax.swing.JLabel lbl2 = new javax.swing.JLabel("Monto recaudado: $" + String.format("%.2f", montoTotal));
        lbl2.setFont(boldFont);
        lbl2.setForeground(Color.BLACK);

        javax.swing.JLabel lbl3 = new javax.swing.JLabel("Último boleto vendido: " + haceTiempo);
        lbl3.setFont(regularFont);
        lbl3.setForeground(new Color(60, 60, 60));

        panel.add(lbl1);
        panel.add(lbl2);
        panel.add(lbl3);

        panel.revalidate();
        panel.repaint();
    }

    public void exportarGraficasCombinadas(String nombreArchivo)
    {
        try
        {
            int width = 600;
            int height = 400;

            BufferedImage img1 = graficoBoletos.createBufferedImage(width, height);
            BufferedImage img2 = graficoIngresos.createBufferedImage(width, height);

            BufferedImage combined = new BufferedImage(width, height * 2, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g = combined.createGraphics();

            g.drawImage(img1, 0, 0, null);
            g.drawImage(img2, 0, height, null);
            g.dispose();

            File outputfile = new File(nombreArchivo);
            ImageIO.write(combined, "png", outputfile);

            JOptionPane.showMessageDialog(null, "Gráficas combinadas exportadas como imagen.");
        } catch (IOException e)
        {
            JOptionPane.showMessageDialog(null, "Error al exportar la imagen combinada.");
            e.printStackTrace();
        }
    }

    public void guardarGraficoComoImagen(JFreeChart chart, String nombreArchivo)
    {
        try
        {
            ChartUtils.saveChartAsPNG(new File(nombreArchivo), chart, 600, 400);
            JOptionPane.showMessageDialog(null, "Gráfica guardada como imagen correctamente.");
        } catch (IOException e)
        {
            JOptionPane.showMessageDialog(null, "Error al guardar la imagen.");
        }
    }

    public void guardarAmbasGraficasComoImagen()
    {
        try
        {
            ChartUtils.saveChartAsPNG(new File("grafica_boletos.png"), graficoBoletos, 600, 400);
            ChartUtils.saveChartAsPNG(new File("grafica_ingresos.png"), graficoIngresos, 600, 400);
            JOptionPane.showMessageDialog(this, "Gráficas exportadas correctamente.");
        } catch (IOException e)
        {
            JOptionPane.showMessageDialog(this, "Error al guardar las gráficas.");
            e.printStackTrace();
        }
    }

    public void exportarReportePDF(int vip, int preferencial, int general, double totalVIP, double totalPref, double totalGen)
    {
        try
        {
            Document documento = new Document();
            PdfWriter.getInstance(documento, new FileOutputStream("reporte_estadisticas.pdf"));
            documento.open();

            Font titulo = new Font(Font.FontFamily.HELVETICA, 20, Font.BOLD);
            Font subtitulo = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD);
            Font normal = new Font(Font.FontFamily.HELVETICA, 12);
            Font negrita = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);

            try
            {
                com.itextpdf.text.Image logo = com.itextpdf.text.Image.getInstance(getClass().getResource("/imagenes/UAEMEX.png"));
                logo.scaleToFit(150, 150);
                logo.setAlignment(com.itextpdf.text.Element.ALIGN_CENTER);
                documento.add(logo);
            } catch (Exception e)
            {
                System.out.println("No se pudo cargar el logo: " + e.getMessage());
            }

            documento.add(new Paragraph("REPORTE DE VENTAS", titulo));
            documento.add(new Paragraph("Estadio Universitario Alberto \"Chivo\" Córdoba", normal));
            documento.add(new Paragraph(" "));

            documento.add(new Paragraph("Resumen de Boletos Vendidos", subtitulo));
            documento.add(new Paragraph("-----------------------------------------------"));
            documento.add(new Paragraph("Categoría: VIP", negrita));
            documento.add(new Paragraph("Cantidad: " + vip, normal));
            documento.add(new Paragraph(" "));
            documento.add(new Paragraph("Categoría: Preferencial", negrita));
            documento.add(new Paragraph("Cantidad: " + preferencial, normal));
            documento.add(new Paragraph(" "));
            documento.add(new Paragraph("Categoría: General", negrita));
            documento.add(new Paragraph("Cantidad: " + general, normal));
            documento.add(new Paragraph(" "));

            documento.add(new Paragraph("Ingresos por Categoría", subtitulo));
            documento.add(new Paragraph("-----------------------------------------------"));
            documento.add(new Paragraph("VIP: $" + totalVIP, normal));
            documento.add(new Paragraph("Preferencial: $" + totalPref, normal));
            documento.add(new Paragraph("General: $" + totalGen, normal));
            documento.add(new Paragraph(" "));

            double total = totalVIP + totalPref + totalGen;
            documento.add(new Paragraph("==============================================="));
            Paragraph totalFinal = new Paragraph("TOTAL RECAUDADO: $" + total, negrita);
            totalFinal.setSpacingBefore(10f);
            documento.add(totalFinal);

            Paragraph fecha = new Paragraph("Generado el: " + java.time.LocalDateTime.now().toString(), normal);
            fecha.setSpacingBefore(15f);
            documento.add(fecha);

            if (VtnPrincipal.correoSesion != null)
            {
                Paragraph usuario = new Paragraph("Generado por: " + VtnPrincipal.correoSesion, normal);
                documento.add(usuario);
            }

            documento.close();
            JOptionPane.showMessageDialog(null, "Reporte PDF generado correctamente.");

        } catch (Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al generar el PDF.");
        }
    }

    public void generarReportePDFDesdeGraficas()
    {
        List<Boleto> boletos = (List<Boleto>) ManipulacionArchivos.carga(null, "boletosVendidos.dat");

        if (boletos == null || boletos.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No hay datos de boletos vendidos.");
            return;
        }

        int vip = 0, preferencial = 0, general = 0;
        double totalVIP = 0, totalPref = 0, totalGen = 0;

        for (Boleto b : boletos)
        {
            switch (b.getCategoria())
            {
                case "VIP" ->
                {
                    vip++;
                    totalVIP += b.getPrecio();
                }
                case "Preferencial" ->
                {
                    preferencial++;
                    totalPref += b.getPrecio();
                }
                case "General" ->
                {
                    general++;
                    totalGen += b.getPrecio();
                }
            }
        }

        exportarReportePDF(vip, preferencial, general, totalVIP, totalPref, totalGen);
    }

    public static void actualizarGraficas()
    {
        if (instancia != null)
        {
            instancia.mostrarGraficaIngresos();
        }
    }

    private void mostrarEstadisticasBoletos(JPanel panelDestino)
    {
        int vip = 0, preferencial = 0, general = 0;

        List<Boleto> boletosVendidos = (List<Boleto>) ManipulacionArchivos.carga(null, "boletosVendidos.dat");
        if (boletosVendidos != null)
        {
            for (Boleto b : boletosVendidos)
            {
                switch (b.getCategoria())
                {
                    case "VIP" ->
                        vip++;
                    case "Preferencial" ->
                        preferencial++;
                    case "General" ->
                        general++;
                }
            }
        }

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(vip, "Boletos", "VIP");
        dataset.addValue(preferencial, "Boletos", "Preferencial");
        dataset.addValue(general, "Boletos", "General");

        JFreeChart chart = ChartFactory.createBarChart(
                "Boletos Vendidos por Categoría",
                "Categoría", "Cantidad",
                dataset, PlotOrientation.VERTICAL,
                false, true, false
        );
        graficoBoletos = chart;

        CategoryPlot plot = chart.getCategoryPlot();
        NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();
        yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(panelDestino.getSize());

        panelDestino.removeAll();
        panelDestino.setLayout(new BorderLayout());
        panelDestino.add(chartPanel, BorderLayout.CENTER);
        panelDestino.validate();
    }

    private void mostrarGraficaIngresos()
    {
        List<Boleto> boletos = (List<Boleto>) ManipulacionArchivos.carga(null, "boletosVendidos.dat");

        if (boletos == null || boletos.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No hay boletos vendidos para mostrar ingresos.");
            return;
        }

        Map<String, Double> ingresos = new HashMap<>();
        for (Boleto b : boletos)
        {
            ingresos.put(b.getCategoria(),
                    ingresos.getOrDefault(b.getCategoria(), 0.0) + b.getPrecio());
        }

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (Map.Entry<String, Double> entry : ingresos.entrySet())
        {
            dataset.addValue(entry.getValue(), "Ingresos", entry.getKey());
        }

        JFreeChart grafica = ChartFactory.createBarChart(
                "Ingresos por Categoría",
                "Categoría",
                "Monto ($)",
                dataset,
                PlotOrientation.VERTICAL,
                false, true, false
        );
        graficoIngresos = grafica;

        ChartPanel panel = new ChartPanel(grafica);
        panel.setMouseWheelEnabled(true);

        panelIngresos.removeAll();
        panelIngresos.setLayout(new BorderLayout());
        panelIngresos.add(panel, BorderLayout.CENTER);
        panelIngresos.validate();
    }

    private void cargarPreciosDesdeArchivo()
    {
        Object datos = ManipulacionArchivos.carga(null, "precios.dat");
        if (datos instanceof Map<?, ?> datosMap)
        {
            try
            {
                Map<String, Double> precios = (Map<String, Double>) datosMap;
                precioGeneral.setText(String.valueOf(precios.get("General")));
                precioPreferencial.setText(String.valueOf(precios.get("Preferencial")));
                precioVIP.setText(String.valueOf(precios.get("VIP")));
            } catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error al cargar precios: " + e.getMessage());
            }
        } else
        {
            precioGeneral.setText("0");
            precioPreferencial.setText("0");
            precioVIP.setText("0");
        }
    }

    private void guardarPrecios()
    {
        try
        {
            double general = Double.parseDouble(precioGeneral.getText());
            double preferencial = Double.parseDouble(precioPreferencial.getText());
            double vip = Double.parseDouble(precioVIP.getText());

            VtnAsientos.precios.put("General", general);
            VtnAsientos.precios.put("Preferencial", preferencial);
            VtnAsientos.precios.put("VIP", vip);

            JOptionPane.showMessageDialog(this, "Precios actualizados con éxito.");
        } catch (NumberFormatException ex)
        {
            JOptionPane.showMessageDialog(this, "Verifica que los precios sean números válidos.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel labelVistaPrevia;
    private javax.swing.JPanel panelEstadisticas;
    private javax.swing.JPanel panelIngresos;
    private javax.swing.JPanel panelResumen;
    private javax.swing.JTextField precioGeneral;
    private javax.swing.JTextField precioPreferencial;
    private javax.swing.JTextField precioVIP;
    // End of variables declaration//GEN-END:variables
}
